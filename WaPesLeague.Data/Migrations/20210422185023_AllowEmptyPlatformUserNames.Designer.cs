// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WaPesLeague.Data.Migrations
{
    [DbContext(typeof(WaPesDbContext))]
    [Migration("20210422185023_AllowEmptyPlatformUserNames")]
    partial class AllowEmptyPlatformUserNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DefaultAutoCreateExtraSessionsWhenAllTeamsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultAutoCreateExtraSessionsWithAClosedTeam")
                        .HasColumnType("bit");

                    b.Property<decimal>("DefaultHoursToOpenRegistrationBeforeStart")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DefaultSessionDuration")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DefaultSessionExtraInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DefaultSessionPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("DefaultSessionRecurringWithAClosedTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultSessionRecurringWithAllOpen")
                        .HasColumnType("bit");

                    b.Property<decimal>("DefaultStartTime")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DiscordServerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ShowPESSideSelectionInfo")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UsePasswordForSessions")
                        .HasColumnType("bit");

                    b.Property<bool>("UseServerForSessions")
                        .HasColumnType("bit");

                    b.HasKey("ServerId");

                    b.HasIndex("DiscordServerId")
                        .HasDatabaseName("IX_Server_DiscordServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.Property<int>("ServerTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerTeamId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeamTag", b =>
                {
                    b.Property<int>("ServerTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServerTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServerTeamTagId");

                    b.HasIndex("ServerTeamId");

                    b.ToTable("ServerTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.Formation", b =>
                {
                    b.Property<int>("FormationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FormationId");

                    b.ToTable("Formations");

                    b.HasData(
                        new
                        {
                            FormationId = 1,
                            IsDefault = true,
                            Name = "Basic_433"
                        },
                        new
                        {
                            FormationId = 2,
                            IsDefault = false,
                            Name = "Basic_442"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationPosition", b =>
                {
                    b.Property<int>("FormationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("FormationPositionId");

                    b.HasIndex("FormationId");

                    b.HasIndex("PositionId");

                    b.ToTable("FormationPositions");

                    b.HasData(
                        new
                        {
                            FormationPositionId = 1,
                            FormationId = 1,
                            PositionId = 1
                        },
                        new
                        {
                            FormationPositionId = 2,
                            FormationId = 1,
                            PositionId = 2
                        },
                        new
                        {
                            FormationPositionId = 3,
                            FormationId = 1,
                            PositionId = 5
                        },
                        new
                        {
                            FormationPositionId = 4,
                            FormationId = 1,
                            PositionId = 6
                        },
                        new
                        {
                            FormationPositionId = 5,
                            FormationId = 1,
                            PositionId = 7
                        },
                        new
                        {
                            FormationPositionId = 6,
                            FormationId = 1,
                            PositionId = 10
                        },
                        new
                        {
                            FormationPositionId = 7,
                            FormationId = 1,
                            PositionId = 13
                        },
                        new
                        {
                            FormationPositionId = 8,
                            FormationId = 1,
                            PositionId = 16
                        },
                        new
                        {
                            FormationPositionId = 9,
                            FormationId = 1,
                            PositionId = 20
                        },
                        new
                        {
                            FormationPositionId = 10,
                            FormationId = 1,
                            PositionId = 27
                        },
                        new
                        {
                            FormationPositionId = 11,
                            FormationId = 1,
                            PositionId = 24
                        },
                        new
                        {
                            FormationPositionId = 12,
                            FormationId = 2,
                            PositionId = 1
                        },
                        new
                        {
                            FormationPositionId = 13,
                            FormationId = 2,
                            PositionId = 2
                        },
                        new
                        {
                            FormationPositionId = 14,
                            FormationId = 2,
                            PositionId = 5
                        },
                        new
                        {
                            FormationPositionId = 15,
                            FormationId = 2,
                            PositionId = 6
                        },
                        new
                        {
                            FormationPositionId = 16,
                            FormationId = 2,
                            PositionId = 7
                        },
                        new
                        {
                            FormationPositionId = 17,
                            FormationId = 2,
                            PositionId = 9
                        },
                        new
                        {
                            FormationPositionId = 18,
                            FormationId = 2,
                            PositionId = 14
                        },
                        new
                        {
                            FormationPositionId = 19,
                            FormationId = 2,
                            PositionId = 15
                        },
                        new
                        {
                            FormationPositionId = 20,
                            FormationId = 2,
                            PositionId = 19
                        },
                        new
                        {
                            FormationPositionId = 21,
                            FormationId = 2,
                            PositionId = 24
                        },
                        new
                        {
                            FormationPositionId = 22,
                            FormationId = 2,
                            PositionId = 24
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationTag", b =>
                {
                    b.Property<int>("FormationTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FormationTagId");

                    b.HasIndex("FormationId");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("FormationTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.Property<int>("ServerFormationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerFormationId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerFormations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationPosition", b =>
                {
                    b.Property<int>("ServerFormationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ServerFormationId")
                        .HasColumnType("int");

                    b.HasKey("ServerFormationPositionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ServerFormationId");

                    b.ToTable("ServerFormationPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationTag", b =>
                {
                    b.Property<int>("ServerFormationTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServerFormationId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ServerFormationTagId");

                    b.HasIndex("ServerFormationId");

                    b.ToTable("ServerFormationTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.Property<int>("MixChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscordChannelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("MixGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MixChannelId");

                    b.HasIndex("DiscordChannelId")
                        .HasDatabaseName("IX_MixChannel_DiscordChannelId");

                    b.HasIndex("MixGroupId");

                    b.ToTable("MixChannels");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.Property<int>("MixChannelTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("MixChannelId")
                        .HasColumnType("int");

                    b.Property<string>("MixChannelTeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixChannelTeamId");

                    b.HasIndex("MixChannelId");

                    b.ToTable("MixChannelTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamPosition", b =>
                {
                    b.Property<int>("MixChannelTeamPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixChannelTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("MixChannelTeamPositionId");

                    b.HasIndex("MixChannelTeamId");

                    b.HasIndex("PositionId");

                    b.ToTable("MixChannelTeamPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamTag", b =>
                {
                    b.Property<int>("MixChannelTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixChannelTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixChannelTeamTagId");

                    b.HasIndex("MixChannelTeamId");

                    b.ToTable("MixChannelTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.Property<int>("MixGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreateExtraMixChannels")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("HoursToOpenRegistrationBeforeStart")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxSessionDurationInHours")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("Recurring")
                        .HasColumnType("bit");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Start")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("MixGroupId");

                    b.HasIndex("ServerId");

                    b.ToTable("MixGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.Property<int>("MixPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("MixTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("MixPositionId");

                    b.HasIndex("MixTeamId");

                    b.HasIndex("PositionId");

                    b.ToTable("MixPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPositionReservation", b =>
                {
                    b.Property<int>("MixPositionReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<int>("MixPositionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MixPositionReservationId");

                    b.HasIndex("MixPositionId");

                    b.HasIndex("UserId");

                    b.ToTable("MixPositionReservations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.Property<int>("MixSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CrashCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistrationOpening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToClose")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FollowUpSessionActivated")
                        .HasColumnType("bit");

                    b.Property<string>("GameRoomName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MatchCount")
                        .HasColumnType("int");

                    b.Property<int>("MixChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoomOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MixSessionId");

                    b.HasIndex("MixChannelId");

                    b.HasIndex("RoomOwnerId");

                    b.ToTable("MixSessions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.Property<int>("MixTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LockedTeamPlayerCount")
                        .HasColumnType("int");

                    b.Property<int>("MixSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PositionsLocked")
                        .HasColumnType("bit");

                    b.HasKey("MixTeamId");

                    b.HasIndex("MixSessionId");

                    b.ToTable("MixTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamTag", b =>
                {
                    b.Property<int>("MixTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixTeamTagId");

                    b.HasIndex("MixTeamId");

                    b.ToTable("MixTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Platform.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            Description = "The Playstation Network Platform",
                            Name = "PSN"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsRequiredForMix")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPositionId")
                        .HasColumnType("int");

                    b.Property<int>("PositionGroupId")
                        .HasColumnType("int");

                    b.HasKey("PositionId");

                    b.HasIndex("ParentPositionId");

                    b.HasIndex("PositionGroupId", "Order")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            Code = "GK",
                            Description = "Goalkeeper",
                            IsRequiredForMix = false,
                            Order = 1,
                            PositionGroupId = 1
                        },
                        new
                        {
                            PositionId = 2,
                            Code = "LB",
                            Description = "Left Back",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 3,
                            Code = "LWB",
                            Description = "Left Wing Back",
                            IsRequiredForMix = true,
                            Order = 2,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 4,
                            Code = "CB",
                            Description = "Centre Back",
                            IsRequiredForMix = true,
                            Order = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 5,
                            Code = "LCB",
                            Description = "Left Centre Back",
                            IsRequiredForMix = true,
                            Order = 3,
                            ParentPositionId = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 6,
                            Code = "RCB",
                            Description = "Right Centre Back",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 7,
                            Code = "RB",
                            Description = "Right Back",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 8,
                            Code = "RWB",
                            Description = "Right Wing Back",
                            IsRequiredForMix = true,
                            Order = 7,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 9,
                            Code = "LM",
                            Description = "Left Midfielder",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 10,
                            Code = "DMF",
                            Description = "Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 3,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 11,
                            Code = "LCDM",
                            Description = "Left Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 2,
                            ParentPositionId = 10,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 12,
                            Code = "RCDM",
                            Description = "Right Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 4,
                            ParentPositionId = 10,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 13,
                            Code = "CM",
                            Description = "Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 14,
                            Code = "LCM",
                            Description = "Left Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 13,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 15,
                            Code = "RCM",
                            Description = "Right Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 7,
                            ParentPositionId = 13,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 16,
                            Code = "AMF",
                            Description = "Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 9,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 17,
                            Code = "LCAM",
                            Description = "Left Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 8,
                            ParentPositionId = 16,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 18,
                            Code = "RCAM",
                            Description = "Right Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 10,
                            ParentPositionId = 16,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 19,
                            Code = "RM",
                            Description = "Right Midfielder",
                            IsRequiredForMix = true,
                            Order = 11,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 20,
                            Code = "LWF",
                            Description = "Left Wing Forward",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 21,
                            Code = "SS",
                            Description = "Second Striker",
                            IsRequiredForMix = true,
                            Order = 3,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 22,
                            Code = "LSS",
                            Description = "Left Wing Forward",
                            IsRequiredForMix = true,
                            Order = 2,
                            ParentPositionId = 21,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 23,
                            Code = "RSS",
                            Description = "Right Second Striker",
                            IsRequiredForMix = true,
                            Order = 4,
                            ParentPositionId = 21,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 24,
                            Code = "CF",
                            Description = "Central Forward",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 25,
                            Code = "LCF",
                            Description = "Left Central Forward",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 24,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 26,
                            Code = "RCF",
                            Description = "Right Central Striker",
                            IsRequiredForMix = true,
                            Order = 7,
                            ParentPositionId = 24,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 27,
                            Code = "RWF",
                            Description = "Right Wing Forward",
                            IsRequiredForMix = true,
                            Order = 8,
                            PositionGroupId = 4
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionGroup", b =>
                {
                    b.Property<int>("PositionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseValue")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("PositionGroupId");

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("PositionGroups");

                    b.HasData(
                        new
                        {
                            PositionGroupId = 1,
                            Code = "GK",
                            Description = "Container for the goalkeeper position",
                            Name = "Goalkeeper",
                            Order = 1
                        },
                        new
                        {
                            PositionGroupId = 2,
                            Code = "DEF",
                            Description = "Container for the defensive positions",
                            Name = "Defenders",
                            Order = 2
                        },
                        new
                        {
                            PositionGroupId = 3,
                            Code = "MID",
                            Description = "Container for the midfield positions",
                            Name = "Midfielders",
                            Order = 3
                        },
                        new
                        {
                            PositionGroupId = 4,
                            Code = "ATT",
                            Description = "Container for the attacking positions",
                            Name = "Attackers",
                            Order = 4
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionTag", b =>
                {
                    b.Property<int>("PositionTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionTagId");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionTags");

                    b.HasData(
                        new
                        {
                            PositionTagId = 1,
                            PositionId = 1,
                            Tag = "TW"
                        },
                        new
                        {
                            PositionTagId = 2,
                            PositionId = 1,
                            Tag = "G"
                        },
                        new
                        {
                            PositionTagId = 3,
                            PositionId = 1,
                            Tag = "1"
                        },
                        new
                        {
                            PositionTagId = 4,
                            PositionId = 7,
                            Tag = "DD"
                        },
                        new
                        {
                            PositionTagId = 5,
                            PositionId = 7,
                            Tag = "5"
                        },
                        new
                        {
                            PositionTagId = 6,
                            PositionId = 2,
                            Tag = "DG"
                        },
                        new
                        {
                            PositionTagId = 7,
                            PositionId = 2,
                            Tag = "2"
                        },
                        new
                        {
                            PositionTagId = 8,
                            PositionId = 4,
                            Tag = "DC"
                        },
                        new
                        {
                            PositionTagId = 9,
                            PositionId = 4,
                            Tag = "CV"
                        },
                        new
                        {
                            PositionTagId = 10,
                            PositionId = 4,
                            Tag = "CH"
                        },
                        new
                        {
                            PositionTagId = 11,
                            PositionId = 4,
                            Tag = "SW"
                        },
                        new
                        {
                            PositionTagId = 12,
                            PositionId = 5,
                            Tag = "DCG"
                        },
                        new
                        {
                            PositionTagId = 13,
                            PositionId = 5,
                            Tag = "3"
                        },
                        new
                        {
                            PositionTagId = 14,
                            PositionId = 6,
                            Tag = "DCD"
                        },
                        new
                        {
                            PositionTagId = 15,
                            PositionId = 6,
                            Tag = "4"
                        },
                        new
                        {
                            PositionTagId = 16,
                            PositionId = 9,
                            Tag = "MG"
                        },
                        new
                        {
                            PositionTagId = 17,
                            PositionId = 9,
                            Tag = "LW"
                        },
                        new
                        {
                            PositionTagId = 18,
                            PositionId = 19,
                            Tag = "MD"
                        },
                        new
                        {
                            PositionTagId = 19,
                            PositionId = 19,
                            Tag = "RW"
                        },
                        new
                        {
                            PositionTagId = 20,
                            PositionId = 10,
                            Tag = "MDC"
                        },
                        new
                        {
                            PositionTagId = 21,
                            PositionId = 10,
                            Tag = "CDM"
                        },
                        new
                        {
                            PositionTagId = 22,
                            PositionId = 10,
                            Tag = "Pirlo"
                        },
                        new
                        {
                            PositionTagId = 23,
                            PositionId = 10,
                            Tag = "Vieira"
                        },
                        new
                        {
                            PositionTagId = 24,
                            PositionId = 10,
                            Tag = "Kante"
                        },
                        new
                        {
                            PositionTagId = 25,
                            PositionId = 10,
                            Tag = "DM"
                        },
                        new
                        {
                            PositionTagId = 26,
                            PositionId = 10,
                            Tag = "6"
                        },
                        new
                        {
                            PositionTagId = 27,
                            PositionId = 13,
                            Tag = "MC"
                        },
                        new
                        {
                            PositionTagId = 28,
                            PositionId = 13,
                            Tag = "MR"
                        },
                        new
                        {
                            PositionTagId = 29,
                            PositionId = 13,
                            Tag = "CMF"
                        },
                        new
                        {
                            PositionTagId = 30,
                            PositionId = 13,
                            Tag = "8"
                        },
                        new
                        {
                            PositionTagId = 31,
                            PositionId = 16,
                            Tag = "CAM"
                        },
                        new
                        {
                            PositionTagId = 32,
                            PositionId = 16,
                            Tag = "AM"
                        },
                        new
                        {
                            PositionTagId = 33,
                            PositionId = 16,
                            Tag = "AMC"
                        },
                        new
                        {
                            PositionTagId = 34,
                            PositionId = 16,
                            Tag = "MO"
                        },
                        new
                        {
                            PositionTagId = 35,
                            PositionId = 16,
                            Tag = "MOC"
                        },
                        new
                        {
                            PositionTagId = 36,
                            PositionId = 16,
                            Tag = "10"
                        },
                        new
                        {
                            PositionTagId = 37,
                            PositionId = 16,
                            Tag = "Riquelme"
                        },
                        new
                        {
                            PositionTagId = 38,
                            PositionId = 16,
                            Tag = "Zidane"
                        },
                        new
                        {
                            PositionTagId = 39,
                            PositionId = 20,
                            Tag = "LF"
                        },
                        new
                        {
                            PositionTagId = 40,
                            PositionId = 20,
                            Tag = "Lang"
                        },
                        new
                        {
                            PositionTagId = 41,
                            PositionId = 20,
                            Tag = "ATG"
                        },
                        new
                        {
                            PositionTagId = 42,
                            PositionId = 20,
                            Tag = "7"
                        },
                        new
                        {
                            PositionTagId = 43,
                            PositionId = 27,
                            Tag = "RF"
                        },
                        new
                        {
                            PositionTagId = 44,
                            PositionId = 27,
                            Tag = "ATD"
                        },
                        new
                        {
                            PositionTagId = 45,
                            PositionId = 27,
                            Tag = "11"
                        },
                        new
                        {
                            PositionTagId = 46,
                            PositionId = 21,
                            Tag = "F9"
                        },
                        new
                        {
                            PositionTagId = 47,
                            PositionId = 21,
                            Tag = "FALSE9"
                        },
                        new
                        {
                            PositionTagId = 48,
                            PositionId = 21,
                            Tag = "FALSE 9"
                        },
                        new
                        {
                            PositionTagId = 49,
                            PositionId = 24,
                            Tag = "9"
                        },
                        new
                        {
                            PositionTagId = 50,
                            PositionId = 24,
                            Tag = "BU"
                        },
                        new
                        {
                            PositionTagId = 51,
                            PositionId = 24,
                            Tag = "ST"
                        },
                        new
                        {
                            PositionTagId = 52,
                            PositionId = 24,
                            Tag = "SP"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("UserGuid")
                        .HasDatabaseName("IX_Contacts_Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMember", b =>
                {
                    b.Property<int>("UserMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordMention")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscordNickName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscordUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserMemberId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMembers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserPlatform", b =>
                {
                    b.Property<int>("UserPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserPlatformId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlatforms");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("DefaultTeams")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.ServerTeam", "Team")
                        .WithMany("Tags")
                        .HasForeignKey("ServerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.Formation", "Formation")
                        .WithMany("FormationPositions")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("FormationPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.Formation", "Formation")
                        .WithMany("Tags")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ServerFormations")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("ServerFormationPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Formation.ServerFormation", "Formation")
                        .WithMany("Positions")
                        .HasForeignKey("ServerFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.ServerFormation", "Formation")
                        .WithMany("Tags")
                        .HasForeignKey("ServerFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixGroup", "MixGroup")
                        .WithMany("MixChannels")
                        .HasForeignKey("MixGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannel", "MixChannel")
                        .WithMany("MixChannelTeams")
                        .HasForeignKey("MixChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannel");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannelTeam", "MixChannelTeam")
                        .WithMany("DefaultFormation")
                        .HasForeignKey("MixChannelTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("MixChannelPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannelTeam");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannelTeam", "MixChannelTeam")
                        .WithMany("Tags")
                        .HasForeignKey("MixChannelTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannelTeam");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("MixGroups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixTeam", "MixTeam")
                        .WithMany("Formation")
                        .HasForeignKey("MixTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("MixPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixTeam");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPositionReservation", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixPosition", "MixPosition")
                        .WithMany("Reservations")
                        .HasForeignKey("MixPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("MixPositionReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixPosition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannel", "MixChannel")
                        .WithMany("MixSessions")
                        .HasForeignKey("MixChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "RoomOwner")
                        .WithMany("OwnerOfSessions")
                        .HasForeignKey("RoomOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MixChannel");

                    b.Navigation("RoomOwner");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixSession", "MixSession")
                        .WithMany("MixTeams")
                        .HasForeignKey("MixSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSession");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixTeam", "MixTeam")
                        .WithMany("Tags")
                        .HasForeignKey("MixTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixTeam");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "ParentPosition")
                        .WithMany("ChildPositions")
                        .HasForeignKey("ParentPositionId");

                    b.HasOne("WaPesLeague.Data.Entities.Position.PositionGroup", "PositionGroup")
                        .WithMany("Positions")
                        .HasForeignKey("PositionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPosition");

                    b.Navigation("PositionGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("Tags")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMember", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("UserMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserPlatform", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Platform.Platform", "Platform")
                        .WithMany("PlatformUsers")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("PlatformUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.Server", b =>
                {
                    b.Navigation("DefaultTeams");

                    b.Navigation("Members");

                    b.Navigation("MixGroups");

                    b.Navigation("ServerFormations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.Formation", b =>
                {
                    b.Navigation("FormationPositions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.Navigation("MixChannelTeams");

                    b.Navigation("MixSessions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.Navigation("DefaultFormation");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.Navigation("MixChannels");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.Navigation("MixTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.Navigation("Formation");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Platform.Platform", b =>
                {
                    b.Navigation("PlatformUsers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.Navigation("ChildPositions");

                    b.Navigation("FormationPositions");

                    b.Navigation("MixChannelPositions");

                    b.Navigation("MixPositions");

                    b.Navigation("ServerFormationPositions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionGroup", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.User", b =>
                {
                    b.Navigation("MixPositionReservations");

                    b.Navigation("OwnerOfSessions");

                    b.Navigation("PlatformUsers");

                    b.Navigation("UserMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
