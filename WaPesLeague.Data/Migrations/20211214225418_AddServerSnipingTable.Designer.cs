// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WaPesLeague.Data;

namespace WaPesLeague.Data.Migrations
{
    [DbContext(typeof(WaPesDbContext))]
    [Migration("20211214225418_AddServerSnipingTable")]
    partial class AddServerSnipingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Association", b =>
                {
                    b.Property<int>("AssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationTenantId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultTeamType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Normal");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssociationId");

                    b.HasIndex("AssociationTenantId");

                    b.ToTable("Associations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueGroup", b =>
                {
                    b.Property<int>("AssociationLeagueGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssociationLeagueGroupId");

                    b.HasIndex("AssociationId");

                    b.ToTable("AssociationLeagueGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueSeason", b =>
                {
                    b.Property<int>("AssociationLeagueSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationLeagueGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Edition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("AssociationLeagueSeasonId");

                    b.HasIndex("AssociationLeagueGroupId");

                    b.ToTable("AssociationLeagueSeasons");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeam", b =>
                {
                    b.Property<int>("AssociationTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TeamType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AssociationTeamId");

                    b.HasIndex("AssociationId");

                    b.ToTable("AssociationTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeamPlayer", b =>
                {
                    b.Property<int>("AssociationTeamPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationTeamId")
                        .HasColumnType("int");

                    b.Property<int>("AssociationTenantPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("TeamMemberType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AssociationTeamPlayerId");

                    b.HasIndex("AssociationTeamId");

                    b.HasIndex("AssociationTenantPlayerId");

                    b.ToTable("AssociationTeamPlayer");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTenant", b =>
                {
                    b.Property<int>("AssociationTenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AssociationTenantId");

                    b.ToTable("AssociationTenants");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTenantPlayer", b =>
                {
                    b.Property<int>("AssociationTenantPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationTenantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AssociationTenantPlayerId");

                    b.HasIndex("AssociationTenantId");

                    b.HasIndex("UserId");

                    b.ToTable("AssociationTenantPlayers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssociationLeagueSeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("DivisionId");

                    b.HasIndex("AssociationLeagueSeasonId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroup", b =>
                {
                    b.Property<int>("DivisionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionRoundId")
                        .HasColumnType("int");

                    b.Property<int?>("GoogleSheetImportTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("DivisionGroupId");

                    b.HasIndex("DivisionRoundId");

                    b.HasIndex("GoogleSheetImportTypeId")
                        .IsUnique()
                        .HasFilter("[GoogleSheetImportTypeId] IS NOT NULL");

                    b.ToTable("DivisionGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroupRound", b =>
                {
                    b.Property<int>("DivisionGroupRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DivisionGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("DivisionGroupRoundId");

                    b.HasIndex("DivisionGroupId");

                    b.ToTable("DivisionGroupRounds");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionRound", b =>
                {
                    b.Property<int>("DivisionRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("DivisionRoundId");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionRounds");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowActiveSwapCommand")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowInactiveSwapCommand")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultAutoCreateExtraSessionsWhenAllTeamsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultAutoCreateExtraSessionsWithAClosedTeam")
                        .HasColumnType("bit");

                    b.Property<decimal>("DefaultHoursToOpenRegistrationBeforeStart")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("DefaultSessionDuration")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DefaultSessionExtraInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DefaultSessionPassword")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("DefaultSessionRecurringWithAClosedTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("DefaultSessionRecurringWithAllOpen")
                        .HasColumnType("bit");

                    b.Property<decimal>("DefaultStartTime")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("DiscordServerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasDefaultValue("EN");

                    b.Property<string>("ServerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("ShowPESSideSelectionInfo")
                        .HasColumnType("bit");

                    b.Property<string>("TimeZoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("UsePasswordForSessions")
                        .HasColumnType("bit");

                    b.Property<bool>("UseServerForSessions")
                        .HasColumnType("bit");

                    b.HasKey("ServerId");

                    b.HasIndex("DiscordServerId")
                        .HasDatabaseName("IX_Server_DiscordServerId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerButton", b =>
                {
                    b.Property<int>("ServerButtonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ServerButtonGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShowFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShowUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("ServerButtonId");

                    b.HasIndex("ServerButtonGroupId");

                    b.ToTable("ServerButtons");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerButtonGroup", b =>
                {
                    b.Property<int>("ServerButtonGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ButtonGroupType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasDefaultValue("ShowAllAtTheSameTime");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<decimal>("UseRate")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)");

                    b.HasKey("ServerButtonGroupId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerButtonGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerEvent", b =>
                {
                    b.Property<int>("ServerEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionEntity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerEventId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerEvents");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerRole", b =>
                {
                    b.Property<int>("ServerRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("DiscordRoleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerRoleId");

                    b.HasIndex("DiscordRoleId")
                        .HasDatabaseName("IX_Server_DiscordServerRoleIdId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerRoles");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerSniping", b =>
                {
                    b.Property<int>("ServerSnipingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IntervalAfterRegistrationOpeningInMinutes")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<int>("SignUpDelayDurationInHours")
                        .HasColumnType("int");

                    b.Property<int>("SignUpDelayInMinutes")
                        .HasColumnType("int");

                    b.HasKey("ServerSnipingId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerSnipings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.Property<int>("ServerTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerTeamId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeamTag", b =>
                {
                    b.Property<int>("ServerTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServerTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServerTeamTagId");

                    b.HasIndex("ServerTeamId");

                    b.ToTable("ServerTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.FileImport", b =>
                {
                    b.Property<int>("FileImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileImportTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProcessStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("UnProcessed");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FileImportId");

                    b.HasIndex("FileImportTypeId");

                    b.ToTable("FileImports");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.FileImportRecord", b =>
                {
                    b.Property<int>("FileImportRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileImportId")
                        .HasColumnType("int");

                    b.Property<string>("Record")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("FileImportRecordId");

                    b.HasIndex("FileImportId");

                    b.ToTable("FileImportRecords");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.GoogleSheetImportType", b =>
                {
                    b.Property<int>("GoogleSheetImportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleSheetId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GoogleSheetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasTitleRow")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ImportUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GoogleSheetImportTypeId");

                    b.ToTable("GoogleSheetImportTypes");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.Formation", b =>
                {
                    b.Property<int>("FormationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FormationId");

                    b.ToTable("Formations");

                    b.HasData(
                        new
                        {
                            FormationId = 1,
                            IsDefault = true,
                            Name = "Basic_433"
                        },
                        new
                        {
                            FormationId = 2,
                            IsDefault = false,
                            Name = "Basic_442"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationPosition", b =>
                {
                    b.Property<int>("FormationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("FormationPositionId");

                    b.HasIndex("FormationId");

                    b.HasIndex("PositionId");

                    b.ToTable("FormationPositions");

                    b.HasData(
                        new
                        {
                            FormationPositionId = 1,
                            FormationId = 1,
                            PositionId = 1
                        },
                        new
                        {
                            FormationPositionId = 2,
                            FormationId = 1,
                            PositionId = 2
                        },
                        new
                        {
                            FormationPositionId = 3,
                            FormationId = 1,
                            PositionId = 5
                        },
                        new
                        {
                            FormationPositionId = 4,
                            FormationId = 1,
                            PositionId = 6
                        },
                        new
                        {
                            FormationPositionId = 5,
                            FormationId = 1,
                            PositionId = 7
                        },
                        new
                        {
                            FormationPositionId = 6,
                            FormationId = 1,
                            PositionId = 10
                        },
                        new
                        {
                            FormationPositionId = 7,
                            FormationId = 1,
                            PositionId = 13
                        },
                        new
                        {
                            FormationPositionId = 8,
                            FormationId = 1,
                            PositionId = 16
                        },
                        new
                        {
                            FormationPositionId = 9,
                            FormationId = 1,
                            PositionId = 20
                        },
                        new
                        {
                            FormationPositionId = 10,
                            FormationId = 1,
                            PositionId = 27
                        },
                        new
                        {
                            FormationPositionId = 11,
                            FormationId = 1,
                            PositionId = 24
                        },
                        new
                        {
                            FormationPositionId = 12,
                            FormationId = 2,
                            PositionId = 1
                        },
                        new
                        {
                            FormationPositionId = 13,
                            FormationId = 2,
                            PositionId = 2
                        },
                        new
                        {
                            FormationPositionId = 14,
                            FormationId = 2,
                            PositionId = 5
                        },
                        new
                        {
                            FormationPositionId = 15,
                            FormationId = 2,
                            PositionId = 6
                        },
                        new
                        {
                            FormationPositionId = 16,
                            FormationId = 2,
                            PositionId = 7
                        },
                        new
                        {
                            FormationPositionId = 17,
                            FormationId = 2,
                            PositionId = 9
                        },
                        new
                        {
                            FormationPositionId = 18,
                            FormationId = 2,
                            PositionId = 14
                        },
                        new
                        {
                            FormationPositionId = 19,
                            FormationId = 2,
                            PositionId = 15
                        },
                        new
                        {
                            FormationPositionId = 20,
                            FormationId = 2,
                            PositionId = 19
                        },
                        new
                        {
                            FormationPositionId = 21,
                            FormationId = 2,
                            PositionId = 24
                        },
                        new
                        {
                            FormationPositionId = 22,
                            FormationId = 2,
                            PositionId = 24
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationTag", b =>
                {
                    b.Property<int>("FormationTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FormationTagId");

                    b.HasIndex("FormationId");

                    b.HasIndex("Tag")
                        .IsUnique();

                    b.ToTable("FormationTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.Property<int>("ServerFormationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.HasKey("ServerFormationId");

                    b.HasIndex("ServerId");

                    b.ToTable("ServerFormations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationPosition", b =>
                {
                    b.Property<int>("ServerFormationPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ServerFormationId")
                        .HasColumnType("int");

                    b.HasKey("ServerFormationPositionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ServerFormationId");

                    b.ToTable("ServerFormationPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationTag", b =>
                {
                    b.Property<int>("ServerFormationTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ServerFormationId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ServerFormationTagId");

                    b.HasIndex("ServerFormationId");

                    b.ToTable("ServerFormationTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlanned")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePlayed")
                        .HasColumnType("datetime2");

                    b.Property<int>("DivisionGroupRoundId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MatchStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("DivisionGroupRoundId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeam", b =>
                {
                    b.Property<int>("MatchTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ConfirmedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateConfirmed")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamId");

                    b.HasIndex("ConfirmedById");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchTeam");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayer", b =>
                {
                    b.Property<int>("MatchTeamPlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssociationTeamPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("JerseyNumber")
                        .HasColumnType("int");

                    b.Property<int>("MatchTeamId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamPlayerId");

                    b.HasIndex("AssociationTeamPlayerId");

                    b.HasIndex("MatchTeamId");

                    b.HasIndex("PositionId");

                    b.ToTable("MatchTeamPlayer");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerEvent", b =>
                {
                    b.Property<int>("MatchTeamPlayerEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("MatchTeamPlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MatchTeamPlayerEventId");

                    b.HasIndex("MatchTeamPlayerId");

                    b.ToTable("MatchTeamPlayerEvent");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerStat", b =>
                {
                    b.Property<int>("MatchTeamPlayerStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchPlayerStatTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MatchTeamPlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamPlayerStatId");

                    b.HasIndex("MatchPlayerStatTypeId");

                    b.HasIndex("MatchTeamPlayerId");

                    b.ToTable("MatchTeamPlayerStat");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerStatType", b =>
                {
                    b.Property<int>("MatchTeamPlayerStatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamPlayerStatTypeId");

                    b.ToTable("MatchTeamPlayerStatType");

                    b.HasData(
                        new
                        {
                            MatchTeamPlayerStatTypeId = 1,
                            Code = "InGameRating",
                            Description = "In Game Rating",
                            Order = 1
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 2,
                            Code = "Goals",
                            Description = "Goals",
                            Order = 10
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 3,
                            Code = "OwnGoals",
                            Description = "Own goals",
                            Order = 10
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 4,
                            Code = "Assists",
                            Description = "Assists",
                            Order = 20
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 5,
                            Code = "Shots",
                            Description = "Shots",
                            Order = 100
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 6,
                            Code = "ShotsOnTarget",
                            Description = "Shots on target",
                            Order = 101
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 7,
                            Code = "ShotsOnTargetPerc",
                            Description = "Shots on target percentage",
                            Order = 102
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 8,
                            Code = "Passes",
                            Description = "Passes attempted",
                            Order = 200
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 9,
                            Code = "PassesCompleted",
                            Description = "Passes completed",
                            Order = 201
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 10,
                            Code = "PassPerc",
                            Description = "Passing percentage",
                            Order = 202
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 11,
                            Code = "Tackles",
                            Description = "Tackles attempted",
                            Order = 300
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 12,
                            Code = "TacklesCompleted",
                            Description = "Tackles completed",
                            Order = 301
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 13,
                            Code = "TacklesPerc",
                            Description = "Tackles percentage",
                            Order = 302
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 14,
                            Code = "Interceptions",
                            Description = "Interceptions",
                            Order = 900
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 15,
                            Code = "Touches",
                            Description = "Touches",
                            Order = 901
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 16,
                            Code = "Fouls",
                            Description = "Fouls",
                            Order = 902
                        },
                        new
                        {
                            MatchTeamPlayerStatTypeId = 17,
                            Code = "Offsides",
                            Description = "Offsides",
                            Order = 903
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamStat", b =>
                {
                    b.Property<int>("MatchTeamStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchTeamId")
                        .HasColumnType("int");

                    b.Property<int>("MatchTeamStatTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamStatId");

                    b.HasIndex("MatchTeamId");

                    b.HasIndex("MatchTeamStatTypeId");

                    b.ToTable("MatchTeamStat");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamStatType", b =>
                {
                    b.Property<int>("MatchTeamStatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MatchTeamStatTypeId");

                    b.ToTable("MatchTeamStatType");

                    b.HasData(
                        new
                        {
                            MatchTeamStatTypeId = 1,
                            Code = "Pos",
                            Description = "Possession",
                            Order = 100
                        },
                        new
                        {
                            MatchTeamStatTypeId = 2,
                            Code = "DefPos",
                            Description = "Possession in defensive third",
                            Order = 110
                        },
                        new
                        {
                            MatchTeamStatTypeId = 3,
                            Code = "MidPos",
                            Description = "Possession in midfield third",
                            Order = 111
                        },
                        new
                        {
                            MatchTeamStatTypeId = 4,
                            Code = "AttPos",
                            Description = "Possession in final third",
                            Order = 112
                        },
                        new
                        {
                            MatchTeamStatTypeId = 5,
                            Code = "LeftPos",
                            Description = "Possession on the left side",
                            Order = 120
                        },
                        new
                        {
                            MatchTeamStatTypeId = 6,
                            Code = "CenterPos",
                            Description = "Possession in the center of the pitch",
                            Order = 121
                        },
                        new
                        {
                            MatchTeamStatTypeId = 7,
                            Code = "RightPos",
                            Description = "Possession on the right side",
                            Order = 122
                        },
                        new
                        {
                            MatchTeamStatTypeId = 8,
                            Code = "Shots",
                            Description = "Shots",
                            Order = 200
                        },
                        new
                        {
                            MatchTeamStatTypeId = 9,
                            Code = "ShotsOnTarget",
                            Description = "Shots on target",
                            Order = 201
                        },
                        new
                        {
                            MatchTeamStatTypeId = 10,
                            Code = "ShotsOnTargetPerc",
                            Description = "Shots on target percentage",
                            Order = 202
                        },
                        new
                        {
                            MatchTeamStatTypeId = 11,
                            Code = "Passes",
                            Description = "Passes attempted",
                            Order = 300
                        },
                        new
                        {
                            MatchTeamStatTypeId = 12,
                            Code = "PassesCompleted",
                            Description = "Passes completed",
                            Order = 301
                        },
                        new
                        {
                            MatchTeamStatTypeId = 13,
                            Code = "PassPerc",
                            Description = "Passing percentage",
                            Order = 302
                        },
                        new
                        {
                            MatchTeamStatTypeId = 14,
                            Code = "Tackles",
                            Description = "Tackles attempted",
                            Order = 400
                        },
                        new
                        {
                            MatchTeamStatTypeId = 15,
                            Code = "TacklesCompleted",
                            Description = "Tackles completed",
                            Order = 401
                        },
                        new
                        {
                            MatchTeamStatTypeId = 16,
                            Code = "TacklesPerc",
                            Description = "Tackles percentage",
                            Order = 402
                        },
                        new
                        {
                            MatchTeamStatTypeId = 17,
                            Code = "Interceptions",
                            Description = "Interceptions",
                            Order = 500
                        },
                        new
                        {
                            MatchTeamStatTypeId = 18,
                            Code = "Fouls",
                            Description = "Fouls committed",
                            Order = 600
                        },
                        new
                        {
                            MatchTeamStatTypeId = 19,
                            Code = "Offides",
                            Description = "Offsides",
                            Order = 601
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Metadata.Metadata", b =>
                {
                    b.Property<int>("MetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasDefaultValue("String");

                    b.HasKey("MetadataId");

                    b.ToTable("Metadatas");

                    b.HasData(
                        new
                        {
                            MetadataId = 1,
                            Code = "DiscordId",
                            Description = "The Discord Id of the entity",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 2,
                            Code = "WaPesDiscordName",
                            Description = "The Discord name used to register onto WaPes",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 3,
                            Code = "WaPesPSNName",
                            Description = "The PSN name used to register onto WaPes",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 4,
                            Code = "SpeakEnglish",
                            Description = "can speak english prop on registration",
                            PropertyType = "Bool"
                        },
                        new
                        {
                            MetadataId = 5,
                            Code = "FavouritePosition1",
                            Description = "Favourite Position 1 prop on registration",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 6,
                            Code = "FavouritePosition2",
                            Description = "Favourite Position 2 prop on registration",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 7,
                            Code = "Motto",
                            Description = "Football Motto",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 8,
                            Code = "FootballStyle",
                            Description = "Your FootballStyle",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 9,
                            Code = "Quality1",
                            Description = "Football Quality 1",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 10,
                            Code = "Quality2",
                            Description = "Football Quality 2",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 11,
                            Code = "Quality3",
                            Description = "Football Quality 3",
                            PropertyType = "String"
                        },
                        new
                        {
                            MetadataId = 12,
                            Code = "WaPesJoinDate",
                            Description = "WaPes Joining Date",
                            PropertyType = "DateTime"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.Property<int>("MixChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DiscordChannelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("MixGroupId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("MixChannelId");

                    b.HasIndex("DiscordChannelId")
                        .HasDatabaseName("IX_MixChannel_DiscordChannelId");

                    b.HasIndex("MixGroupId");

                    b.ToTable("MixChannels");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.Property<int>("MixChannelTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("MixChannelId")
                        .HasColumnType("int");

                    b.Property<string>("MixChannelTeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixChannelTeamId");

                    b.HasIndex("MixChannelId");

                    b.ToTable("MixChannelTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamPosition", b =>
                {
                    b.Property<int>("MixChannelTeamPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixChannelTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("MixChannelTeamPositionId");

                    b.HasIndex("MixChannelTeamId");

                    b.HasIndex("PositionId");

                    b.ToTable("MixChannelTeamPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamTag", b =>
                {
                    b.Property<int>("MixChannelTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixChannelTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixChannelTeamTagId");

                    b.HasIndex("MixChannelTeamId");

                    b.ToTable("MixChannelTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.Property<int>("MixGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreateExtraMixChannels")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("HoursToOpenRegistrationBeforeStart")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxSessionDurationInHours")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("Recurring")
                        .HasColumnType("bit");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Start")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("MixGroupId");

                    b.HasIndex("ServerId");

                    b.ToTable("MixGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroupRoleOpening", b =>
                {
                    b.Property<int>("MixGroupRoleOpeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<int>("MixGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ServerRoleId")
                        .HasColumnType("int");

                    b.HasKey("MixGroupRoleOpeningId");

                    b.HasIndex("MixGroupId");

                    b.HasIndex("ServerRoleId");

                    b.ToTable("MixGroupRoleOpenings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.Property<int>("MixPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("MixTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("MixPositionId");

                    b.HasIndex("MixTeamId");

                    b.HasIndex("PositionId");

                    b.ToTable("MixPositions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPositionReservation", b =>
                {
                    b.Property<int>("MixPositionReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<int>("MixPositionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MixPositionReservationId");

                    b.HasIndex("MixPositionId");

                    b.HasIndex("UserId");

                    b.ToTable("MixPositionReservations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.Property<int>("MixSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CrashCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistrationOpening")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateStatsCalculated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateToClose")
                        .HasColumnType("datetime2");

                    b.Property<string>("GameRoomName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MatchCount")
                        .HasColumnType("int");

                    b.Property<int>("MixChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoomOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Server")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MixSessionId");

                    b.HasIndex("MixChannelId");

                    b.HasIndex("RoomOwnerId");

                    b.ToTable("MixSessions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.Property<int>("MixTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LockedTeamPlayerCount")
                        .HasColumnType("int");

                    b.Property<int>("MixSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PositionsLocked")
                        .HasColumnType("bit");

                    b.HasKey("MixTeamId");

                    b.HasIndex("MixSessionId");

                    b.ToTable("MixTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamRoleOpening", b =>
                {
                    b.Property<int>("MixTeamRoleOpeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("MixTeamId")
                        .HasColumnType("int");

                    b.Property<int>("ServerRoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("MixTeamRoleOpeningId");

                    b.HasIndex("MixTeamId");

                    b.HasIndex("ServerRoleId");

                    b.ToTable("MixTeamRoleOpenings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamTag", b =>
                {
                    b.Property<int>("MixTeamTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MixTeamTagId");

                    b.HasIndex("MixTeamId");

                    b.ToTable("MixTeamTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixUserPositionSessionStat", b =>
                {
                    b.Property<int>("MixUserPositionSessionStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MixSessionId")
                        .HasColumnType("int");

                    b.Property<int>("PlayTimeSeconds")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MixUserPositionSessionStatId");

                    b.HasIndex("MixSessionId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("MixUserPositionSessionStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Platform.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlatformId");

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            Description = "The Playstation Network Platform",
                            Name = "PSN"
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsRequiredForMix")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentPositionId")
                        .HasColumnType("int");

                    b.Property<int>("PositionGroupId")
                        .HasColumnType("int");

                    b.HasKey("PositionId");

                    b.HasIndex("ParentPositionId");

                    b.HasIndex("PositionGroupId", "Order")
                        .IsUnique();

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            Code = "GK",
                            Description = "Goalkeeper",
                            IsRequiredForMix = false,
                            Order = 1,
                            PositionGroupId = 1
                        },
                        new
                        {
                            PositionId = 2,
                            Code = "LB",
                            Description = "Left Back",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 3,
                            Code = "LWB",
                            Description = "Left Wing Back",
                            IsRequiredForMix = true,
                            Order = 2,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 4,
                            Code = "CB",
                            Description = "Centre Back",
                            IsRequiredForMix = true,
                            Order = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 5,
                            Code = "LCB",
                            Description = "Left Centre Back",
                            IsRequiredForMix = true,
                            Order = 3,
                            ParentPositionId = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 6,
                            Code = "RCB",
                            Description = "Right Centre Back",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 4,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 7,
                            Code = "RB",
                            Description = "Right Back",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 8,
                            Code = "RWB",
                            Description = "Right Wing Back",
                            IsRequiredForMix = true,
                            Order = 7,
                            PositionGroupId = 2
                        },
                        new
                        {
                            PositionId = 9,
                            Code = "LM",
                            Description = "Left Midfielder",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 10,
                            Code = "DMF",
                            Description = "Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 3,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 11,
                            Code = "LCDM",
                            Description = "Left Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 2,
                            ParentPositionId = 10,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 12,
                            Code = "RCDM",
                            Description = "Right Central Defensive Midfielder",
                            IsRequiredForMix = true,
                            Order = 4,
                            ParentPositionId = 10,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 13,
                            Code = "CM",
                            Description = "Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 14,
                            Code = "LCM",
                            Description = "Left Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 13,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 15,
                            Code = "RCM",
                            Description = "Right Central Midfielder",
                            IsRequiredForMix = true,
                            Order = 7,
                            ParentPositionId = 13,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 16,
                            Code = "AMF",
                            Description = "Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 9,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 17,
                            Code = "LCAM",
                            Description = "Left Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 8,
                            ParentPositionId = 16,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 18,
                            Code = "RCAM",
                            Description = "Right Central Attacking Midfielder",
                            IsRequiredForMix = true,
                            Order = 10,
                            ParentPositionId = 16,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 19,
                            Code = "RM",
                            Description = "Right Midfielder",
                            IsRequiredForMix = true,
                            Order = 11,
                            PositionGroupId = 3
                        },
                        new
                        {
                            PositionId = 20,
                            Code = "LWF",
                            Description = "Left Wing Forward",
                            IsRequiredForMix = true,
                            Order = 1,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 21,
                            Code = "SS",
                            Description = "Second Striker",
                            IsRequiredForMix = true,
                            Order = 3,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 22,
                            Code = "LSS",
                            Description = "Left Wing Forward",
                            IsRequiredForMix = true,
                            Order = 2,
                            ParentPositionId = 21,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 23,
                            Code = "RSS",
                            Description = "Right Second Striker",
                            IsRequiredForMix = true,
                            Order = 4,
                            ParentPositionId = 21,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 24,
                            Code = "CF",
                            Description = "Central Forward",
                            IsRequiredForMix = true,
                            Order = 6,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 25,
                            Code = "LCF",
                            Description = "Left Central Forward",
                            IsRequiredForMix = true,
                            Order = 5,
                            ParentPositionId = 24,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 26,
                            Code = "RCF",
                            Description = "Right Central Striker",
                            IsRequiredForMix = true,
                            Order = 7,
                            ParentPositionId = 24,
                            PositionGroupId = 4
                        },
                        new
                        {
                            PositionId = 27,
                            Code = "RWF",
                            Description = "Right Wing Forward",
                            IsRequiredForMix = true,
                            Order = 8,
                            PositionGroupId = 4
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionGroup", b =>
                {
                    b.Property<int>("PositionGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaseValue")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("PositionGroupId");

                    b.HasIndex("Order")
                        .IsUnique();

                    b.ToTable("PositionGroups");

                    b.HasData(
                        new
                        {
                            PositionGroupId = 1,
                            Code = "GK",
                            Description = "Container for the goalkeeper position",
                            Name = "Goalkeeper",
                            Order = 1
                        },
                        new
                        {
                            PositionGroupId = 2,
                            Code = "DEF",
                            Description = "Container for the defensive positions",
                            Name = "Defenders",
                            Order = 2
                        },
                        new
                        {
                            PositionGroupId = 3,
                            Code = "MID",
                            Description = "Container for the midfield positions",
                            Name = "Midfielders",
                            Order = 3
                        },
                        new
                        {
                            PositionGroupId = 4,
                            Code = "ATT",
                            Description = "Container for the attacking positions",
                            Name = "Attackers",
                            Order = 4
                        });
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionTag", b =>
                {
                    b.Property<int>("PositionTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisplayValue")
                        .HasColumnType("bit");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionTagId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ServerId");

                    b.ToTable("PositionTags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscordDiscriminator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscordName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("UserGuid")
                        .HasDatabaseName("IX_Contacts_Guid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMember", b =>
                {
                    b.Property<int>("UserMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DiscordJoin")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiscordMention")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscordNickName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DiscordUserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DiscordUserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ServerJoin")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserMemberId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMembers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMetadata", b =>
                {
                    b.Property<int>("UserMetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MetadataId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserMetadataId");

                    b.HasIndex("MetadataId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMetadatas");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserPlatform", b =>
                {
                    b.Property<int>("UserPlatformId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserPlatformId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlatforms");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Association", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTenant", "AssociationTenant")
                        .WithMany("Associations")
                        .HasForeignKey("AssociationTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationTenant");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueGroup", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.Association", "Association")
                        .WithMany("AssociationLeagueGroups")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Association");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueSeason", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationLeagueGroup", "AssociationLeagueGroup")
                        .WithMany("AssociationLeagueSeasons")
                        .HasForeignKey("AssociationLeagueGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationLeagueGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.Association", "Association")
                        .WithMany("AssociationTeams")
                        .HasForeignKey("AssociationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Association");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeamPlayer", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTeam", "AssociationTeam")
                        .WithMany("AssociationTeamPlayers")
                        .HasForeignKey("AssociationTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTenantPlayer", "AssociationTenantPlayer")
                        .WithMany("AssociationTeamPlayers")
                        .HasForeignKey("AssociationTenantPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssociationTeam");

                    b.Navigation("AssociationTenantPlayer");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTenantPlayer", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTenant", "AssociationTenant")
                        .WithMany("AssociationTenantPlayers")
                        .HasForeignKey("AssociationTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("AssociationTenantPlayers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationTenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Division", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationLeagueSeason", "AssociationLeagueSeason")
                        .WithMany("Divisions")
                        .HasForeignKey("AssociationLeagueSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationLeagueSeason");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroup", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.DivisionRound", "DivisionRound")
                        .WithMany("DivisionGroups")
                        .HasForeignKey("DivisionRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.FileImport.GoogleSheetImportType", null)
                        .WithOne("DivisionGroup")
                        .HasForeignKey("WaPesLeague.Data.Entities.Association.DivisionGroup", "GoogleSheetImportTypeId");

                    b.Navigation("DivisionRound");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroupRound", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.DivisionGroup", "DivisionGroup")
                        .WithMany("DivisionGroupRounds")
                        .HasForeignKey("DivisionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DivisionGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionRound", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.Division", "Division")
                        .WithMany("DivisionRounds")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerButton", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.ServerButtonGroup", "ButtonGroup")
                        .WithMany("Buttons")
                        .HasForeignKey("ServerButtonGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ButtonGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerButtonGroup", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ButtonGroups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerEvent", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ServerEvents")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerRole", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ServerRoles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerSniping", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ServerSnipings")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("DefaultTeams")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.ServerTeam", "Team")
                        .WithMany("Tags")
                        .HasForeignKey("ServerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.FileImport", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.FileImport.GoogleSheetImportType", "FileImportType")
                        .WithMany("GoogleSheetImports")
                        .HasForeignKey("FileImportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileImportType");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.FileImportRecord", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.FileImport.FileImport", "FileImport")
                        .WithMany("FileImportRecords")
                        .HasForeignKey("FileImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileImport");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.Formation", "Formation")
                        .WithMany("FormationPositions")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("FormationPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.FormationTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.Formation", "Formation")
                        .WithMany("Tags")
                        .HasForeignKey("FormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("ServerFormations")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("ServerFormationPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Formation.ServerFormation", "Formation")
                        .WithMany("Positions")
                        .HasForeignKey("ServerFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormationTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Formation.ServerFormation", "Formation")
                        .WithMany("Tags")
                        .HasForeignKey("ServerFormationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Formation");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.Match", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.DivisionGroupRound", "DivisionGroupRound")
                        .WithMany("Matches")
                        .HasForeignKey("DivisionGroupRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DivisionGroupRound");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.User.User", "ConfirmedBy")
                        .WithMany("MatchTeamsConfirmedByUser")
                        .HasForeignKey("ConfirmedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WaPesLeague.Data.Entities.Match.Match", "Match")
                        .WithMany("MatchTeams")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTeam", "Team")
                        .WithMany("MatchTeams")
                        .HasForeignKey("MatchTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfirmedBy");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayer", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Association.AssociationTeamPlayer", "AssociationTeamPlayer")
                        .WithMany("MatchTeamPlayers")
                        .HasForeignKey("AssociationTeamPlayerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeam", "MatchTeam")
                        .WithMany("MatchTeamPlayers")
                        .HasForeignKey("MatchTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("MatchTeamPlayers")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociationTeamPlayer");

                    b.Navigation("MatchTeam");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerEvent", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeamPlayer", "MatchTeamPlayer")
                        .WithMany("MatchTeamPlayerEvents")
                        .HasForeignKey("MatchTeamPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchTeamPlayer");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerStat", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeamPlayerStatType", "MatchPlayerStatType")
                        .WithMany("MatchTeamPlayerStats")
                        .HasForeignKey("MatchPlayerStatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeamPlayer", "MatchTeamPlayer")
                        .WithMany("MatchTeamPlayerStats")
                        .HasForeignKey("MatchTeamPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchPlayerStatType");

                    b.Navigation("MatchTeamPlayer");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamStat", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeam", "MatchTeam")
                        .WithMany("MatchTeamStats")
                        .HasForeignKey("MatchTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Match.MatchTeamStatType", "MatchTeamStatType")
                        .WithMany("MatchTeamStats")
                        .HasForeignKey("MatchTeamStatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MatchTeam");

                    b.Navigation("MatchTeamStatType");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixGroup", "MixGroup")
                        .WithMany("MixChannels")
                        .HasForeignKey("MixGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannel", "MixChannel")
                        .WithMany("MixChannelTeams")
                        .HasForeignKey("MixChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannel");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannelTeam", "MixChannelTeam")
                        .WithMany("DefaultFormation")
                        .HasForeignKey("MixChannelTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("MixChannelPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannelTeam");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannelTeam", "MixChannelTeam")
                        .WithMany("Tags")
                        .HasForeignKey("MixChannelTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixChannelTeam");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("MixGroups")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroupRoleOpening", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixGroup", "MixGroup")
                        .WithMany("MixGroupRoleOpenings")
                        .HasForeignKey("MixGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Discord.ServerRole", "ServerRole")
                        .WithMany("MixGroupRoleOpenings")
                        .HasForeignKey("ServerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixGroup");

                    b.Navigation("ServerRole");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixTeam", "MixTeam")
                        .WithMany("Formation")
                        .HasForeignKey("MixTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("MixPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixTeam");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPositionReservation", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixPosition", "MixPosition")
                        .WithMany("Reservations")
                        .HasForeignKey("MixPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("MixPositionReservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixPosition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixChannel", "MixChannel")
                        .WithMany("MixSessions")
                        .HasForeignKey("MixChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "RoomOwner")
                        .WithMany("OwnerOfSessions")
                        .HasForeignKey("RoomOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("MixChannel");

                    b.Navigation("RoomOwner");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixSession", "MixSession")
                        .WithMany("MixTeams")
                        .HasForeignKey("MixSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSession");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamRoleOpening", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixTeam", "MixTeam")
                        .WithMany("MixTeamRoleOpenings")
                        .HasForeignKey("MixTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Discord.ServerRole", "ServerRole")
                        .WithMany("MixTeamRoleOpenings")
                        .HasForeignKey("ServerRoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MixTeam");

                    b.Navigation("ServerRole");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeamTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixTeam", "MixTeam")
                        .WithMany("Tags")
                        .HasForeignKey("MixTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixTeam");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixUserPositionSessionStat", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Mix.MixSession", "MixSession")
                        .WithMany("UserPositionStats")
                        .HasForeignKey("MixSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("UserSessionStats")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("PositionSessionStats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MixSession");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "ParentPosition")
                        .WithMany("ChildPositions")
                        .HasForeignKey("ParentPositionId");

                    b.HasOne("WaPesLeague.Data.Entities.Position.PositionGroup", "PositionGroup")
                        .WithMany("Positions")
                        .HasForeignKey("PositionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentPosition");

                    b.Navigation("PositionGroup");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionTag", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Position.Position", "Position")
                        .WithMany("Tags")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("PositionTags")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMember", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Discord.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("UserMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserMetadata", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Metadata.Metadata", "Metadata")
                        .WithMany("UserMetadatas")
                        .HasForeignKey("MetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("UserMetadatas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.UserPlatform", b =>
                {
                    b.HasOne("WaPesLeague.Data.Entities.Platform.Platform", "Platform")
                        .WithMany("PlatformUsers")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaPesLeague.Data.Entities.User.User", "User")
                        .WithMany("PlatformUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Association", b =>
                {
                    b.Navigation("AssociationLeagueGroups");

                    b.Navigation("AssociationTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueGroup", b =>
                {
                    b.Navigation("AssociationLeagueSeasons");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationLeagueSeason", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeam", b =>
                {
                    b.Navigation("AssociationTeamPlayers");

                    b.Navigation("MatchTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTeamPlayer", b =>
                {
                    b.Navigation("MatchTeamPlayers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTenant", b =>
                {
                    b.Navigation("Associations");

                    b.Navigation("AssociationTenantPlayers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.AssociationTenantPlayer", b =>
                {
                    b.Navigation("AssociationTeamPlayers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.Division", b =>
                {
                    b.Navigation("DivisionRounds");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroup", b =>
                {
                    b.Navigation("DivisionGroupRounds");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionGroupRound", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Association.DivisionRound", b =>
                {
                    b.Navigation("DivisionGroups");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.Server", b =>
                {
                    b.Navigation("ButtonGroups");

                    b.Navigation("DefaultTeams");

                    b.Navigation("Members");

                    b.Navigation("MixGroups");

                    b.Navigation("PositionTags");

                    b.Navigation("ServerEvents");

                    b.Navigation("ServerFormations");

                    b.Navigation("ServerRoles");

                    b.Navigation("ServerSnipings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerButtonGroup", b =>
                {
                    b.Navigation("Buttons");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerRole", b =>
                {
                    b.Navigation("MixGroupRoleOpenings");

                    b.Navigation("MixTeamRoleOpenings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Discord.ServerTeam", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.FileImport", b =>
                {
                    b.Navigation("FileImportRecords");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.FileImport.GoogleSheetImportType", b =>
                {
                    b.Navigation("DivisionGroup");

                    b.Navigation("GoogleSheetImports");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.Formation", b =>
                {
                    b.Navigation("FormationPositions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Formation.ServerFormation", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.Match", b =>
                {
                    b.Navigation("MatchTeams");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeam", b =>
                {
                    b.Navigation("MatchTeamPlayers");

                    b.Navigation("MatchTeamStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayer", b =>
                {
                    b.Navigation("MatchTeamPlayerEvents");

                    b.Navigation("MatchTeamPlayerStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamPlayerStatType", b =>
                {
                    b.Navigation("MatchTeamPlayerStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Match.MatchTeamStatType", b =>
                {
                    b.Navigation("MatchTeamStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Metadata.Metadata", b =>
                {
                    b.Navigation("UserMetadatas");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannel", b =>
                {
                    b.Navigation("MixChannelTeams");

                    b.Navigation("MixSessions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixChannelTeam", b =>
                {
                    b.Navigation("DefaultFormation");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixGroup", b =>
                {
                    b.Navigation("MixChannels");

                    b.Navigation("MixGroupRoleOpenings");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixPosition", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixSession", b =>
                {
                    b.Navigation("MixTeams");

                    b.Navigation("UserPositionStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Mix.MixTeam", b =>
                {
                    b.Navigation("Formation");

                    b.Navigation("MixTeamRoleOpenings");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Platform.Platform", b =>
                {
                    b.Navigation("PlatformUsers");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.Position", b =>
                {
                    b.Navigation("ChildPositions");

                    b.Navigation("FormationPositions");

                    b.Navigation("MatchTeamPlayers");

                    b.Navigation("MixChannelPositions");

                    b.Navigation("MixPositions");

                    b.Navigation("ServerFormationPositions");

                    b.Navigation("Tags");

                    b.Navigation("UserSessionStats");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.Position.PositionGroup", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("WaPesLeague.Data.Entities.User.User", b =>
                {
                    b.Navigation("AssociationTenantPlayers");

                    b.Navigation("MatchTeamsConfirmedByUser");

                    b.Navigation("MixPositionReservations");

                    b.Navigation("OwnerOfSessions");

                    b.Navigation("PlatformUsers");

                    b.Navigation("PositionSessionStats");

                    b.Navigation("UserMembers");

                    b.Navigation("UserMetadatas");
                });
#pragma warning restore 612, 618
        }
    }
}
